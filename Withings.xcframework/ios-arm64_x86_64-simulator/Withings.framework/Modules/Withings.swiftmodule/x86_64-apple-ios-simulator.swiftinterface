// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Withings
import CommonCrypto
import CoreBluetooth
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers public class WithingsSyncManager : ObjectiveC.NSObject {
  public enum Status : Swift.Equatable {
    case started(deviceKeys: [Swift.String])
    case backgroundPaused
    case stopped
    public var isStarted: Swift.Bool {
      get
    }
    public static func == (a: Withings.WithingsSyncManager.Status, b: Withings.WithingsSyncManager.Status) -> Swift.Bool
  }
  public class var status: Withings.WithingsSyncManager.Status {
    get
  }
  @objc override dynamic public init()
  public class func start(with deviceKeys: [Swift.String], allowBackgroundScan: Swift.Bool = true)
  public class func stop()
  @objc deinit
}
public enum WithingsSyncStatus {
  case started(Swift.String)
  case succeeded(Swift.String)
  case failed(Swift.String)
  public static let notificationName: Foundation.Notification.Name
  public static let notificationStatusKey: Swift.String
}
public enum BLEWrapperError : Swift.Error {
  public enum BluetoothUnavailbleFailureReason {
    case unsupported
    case unauthorized
    case poweredOff
    case unknown
    public static func == (a: Withings.BLEWrapperError.BluetoothUnavailbleFailureReason, b: Withings.BLEWrapperError.BluetoothUnavailbleFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Operation : Swift.String {
    case connectPeripheral
    case disconnectPeripheral
    case readRSSI
    case discoverServices
    case discoverIncludedServices
    case discoverCharacteristics
    case readCharacteristic
    case writeCharacteristic
    case updateNotificationStatus
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  case bluetoothUnavailable(reason: Withings.BLEWrapperError.BluetoothUnavailbleFailureReason)
  case scanningEndedUnexpectedly
  case operationTimedOut(operation: Withings.BLEWrapperError.Operation)
  case invalidPeripheral
  case peripheralFailedToConnectReasonUnknown
  case peripheralServiceNotFound(missingServicesUUIDs: [CoreBluetooth.CBUUID])
  case peripheralCharacteristicNotFound(missingCharacteristicsUUIDs: [CoreBluetooth.CBUUID])
  case unknownError
}
extension Withings.BLEWrapperError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Withings.BLEWrapperError.BluetoothUnavailbleFailureReason {
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let CentralStateChange: Foundation.Notification.Name
  public static let PeripheralCharacteristicValueUpdate: Foundation.Notification.Name
}
public enum PeripheralScanResult {
  case scanStarted
  case scanResult(peripheral: Withings.Peripheral, advertisementData: [Swift.String : Any], RSSI: Swift.Int?)
  case scanStopped(error: Withings.BLEWrapperError?)
}
public enum AsyncCentralState : Swift.Int {
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias AsyncCentralStateCallback = (Withings.AsyncCentralState) -> Swift.Void
public typealias BluetoothStateCallback = (CoreBluetooth.CBManagerState) -> Swift.Void
public typealias PeripheralScanCallback = (Withings.PeripheralScanResult) -> Swift.Void
public typealias ConnectPeripheralCallback = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
public typealias DisconnectPeripheralCallback = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BLEWrapper : ObjectiveC.NSObject {
  @objc deinit
}
extension Withings.BLEWrapper {
  final public var state: CoreBluetooth.CBManagerState {
    get
  }
  final public class func retrievePeripherals(withUUIDs uuids: [Withings.CBUUIDConvertible]) -> [Withings.Peripheral]
  final public class func retrieveConnectedPeripherals(withServiceUUIDs uuids: [Withings.CBUUIDConvertible]) -> [Withings.Peripheral]
  final public class func scanForPeripherals(withServiceUUIDs serviceUUIDs: [Withings.CBUUIDConvertible]? = nil, options: [Swift.String : Any]? = nil, timeoutAfter timeout: Foundation.TimeInterval, completion: @escaping Withings.PeripheralScanCallback)
  final public class func stopScan()
  final public class func connect(peripheral: CoreBluetooth.CBPeripheral, timeout: Foundation.TimeInterval = 10, _ callback: @escaping Withings.ConnectPeripheralCallback)
  final public class func disconnect(peripheral: CoreBluetooth.CBPeripheral, timeout: Foundation.TimeInterval = 10, _ callback: @escaping Withings.DisconnectPeripheralCallback)
}
extension Withings.BLEWrapper : CoreBluetooth.CBCentralManagerDelegate {
  @objc final public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc final public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc final public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc final public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc final public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
}
extension CoreBluetooth.CBCharacteristic {
  public var optionalService: CoreBluetooth.CBService? {
    get
  }
}
public protocol CBUUIDConvertible {
  var cbuuid: CoreBluetooth.CBUUID { get }
}
extension Foundation.UUID : Withings.CBUUIDConvertible {
  public var cbuuid: CoreBluetooth.CBUUID {
    get
  }
}
extension CoreBluetooth.CBAttribute : Withings.CBUUIDConvertible {
  public var cbuuid: CoreBluetooth.CBUUID {
    get
  }
}
public func ExtractCBUUIDs(_ CBUUIDConvertibles: [Withings.CBUUIDConvertible]?) -> [CoreBluetooth.CBUUID]?
public typealias rssi = Swift.Int
public typealias isNotifying = Swift.Bool
public typealias ReadRSSIRequestCallback = (_ result: Swift.Result<Withings.rssi, Swift.Error>) -> Swift.Void
public typealias ServiceRequestCallback = (_ result: Swift.Result<[CoreBluetooth.CBService], Swift.Error>) -> Swift.Void
public typealias CharacteristicRequestCallback = (_ result: Swift.Result<[CoreBluetooth.CBCharacteristic], Swift.Error>) -> Swift.Void
public typealias ReadCharacRequestCallback = (_ result: Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void
public typealias WriteRequestCallback = (_ result: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
public typealias UpdateNotificationStateCallback = (_ result: Swift.Result<Withings.isNotifying, Swift.Error>) -> Swift.Void
@_hasMissingDesignatedInitializers final public class Peripheral {
  @objc deinit
}
extension Withings.Peripheral : Swift.Equatable {
  public static func == (lhs: Withings.Peripheral, rhs: Withings.Peripheral) -> Swift.Bool
  final public var identifier: Foundation.UUID {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var state: CoreBluetooth.CBPeripheralState {
    get
  }
  final public var services: [CoreBluetooth.CBService]? {
    get
  }
  final public func service(withUUID serviceUUID: Withings.CBUUIDConvertible) -> CoreBluetooth.CBService?
  final public func characteristic(withUUID characteristicUUID: Withings.CBUUIDConvertible, ofServiceWithUUID serviceUUID: Withings.CBUUIDConvertible) -> CoreBluetooth.CBCharacteristic?
  final public func connect(withTimeout timeout: Foundation.TimeInterval?, completion: @escaping Withings.ConnectPeripheralCallback)
  final public func disconnect(completion: @escaping Withings.DisconnectPeripheralCallback)
  final public func readRSSI(completion: @escaping Withings.ReadRSSIRequestCallback)
  final public func discoverServices(withUUIDs serviceUUIDs: [Withings.CBUUIDConvertible]? = nil, completion: @escaping Withings.ServiceRequestCallback)
  final public func discoverIncludedServices(withUUIDs includedServiceUUIDs: [Withings.CBUUIDConvertible]? = nil, ofServiceWithUUID serviceUUID: Withings.CBUUIDConvertible, completion: @escaping Withings.ServiceRequestCallback)
  final public func discoverCharacteristics(withUUIDs characteristicUUIDs: [Withings.CBUUIDConvertible]? = nil, ofServiceWithUUID serviceUUID: Withings.CBUUIDConvertible, completion: @escaping Withings.CharacteristicRequestCallback)
  final public func readValue(ofCharacWithUUID characUUID: Withings.CBUUIDConvertible, fromServiceWithUUID serviceUUID: Withings.CBUUIDConvertible, completion: @escaping Withings.ReadCharacRequestCallback)
  final public func writeValue(ofCharacWithUUID characUUID: Withings.CBUUIDConvertible, fromServiceWithUUID serviceUUID: Withings.CBUUIDConvertible, value: Foundation.Data, type: CoreBluetooth.CBCharacteristicWriteType = .withResponse, completion: @escaping Withings.WriteRequestCallback)
  final public func setNotifyValue(toEnabled enabled: Swift.Bool, forCharacWithUUID characUUID: Withings.CBUUIDConvertible, ofServiceWithUUID serviceUUID: Withings.CBUUIDConvertible, completion: @escaping Withings.UpdateNotificationStateCallback)
}
extension CoreBluetooth.CBPeripheral : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension CoreBluetooth.CBUUID : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension CoreBluetooth.CBCharacteristic : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct WithingsWebViewNotification {
  public var type: Swift.Int {
    get
  }
  public var parameters: [Swift.String : Swift.String] {
    get
  }
}
public struct WithingsInfo {
  public static let version: Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class WebBluetoothWebView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class WithingsWebView : Withings.WebBluetoothWebView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public var isBusy: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration, polyfillJs: Swift.String? = nil, notificationCallback: @escaping ((Withings.WithingsWebViewNotification) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var navigationDelegate: WebKit.WKNavigationDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
extension Withings.BLEWrapperError.BluetoothUnavailbleFailureReason : Swift.Equatable {}
extension Withings.BLEWrapperError.BluetoothUnavailbleFailureReason : Swift.Hashable {}
extension Withings.BLEWrapperError.Operation : Swift.Equatable {}
extension Withings.BLEWrapperError.Operation : Swift.Hashable {}
extension Withings.BLEWrapperError.Operation : Swift.RawRepresentable {}
extension Withings.AsyncCentralState : Swift.Equatable {}
extension Withings.AsyncCentralState : Swift.Hashable {}
extension Withings.AsyncCentralState : Swift.RawRepresentable {}
