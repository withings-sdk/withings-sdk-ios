// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Withings
import CommonCrypto
import CoreBluetooth
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class WithingsSyncManager : ObjectiveC.NSObject {
  public enum Status : Swift.Equatable {
    case started(deviceKeys: [Swift.String])
    case backgroundPaused
    case stopped
    public var isStarted: Swift.Bool {
      get
    }
    public static func == (a: Withings.WithingsSyncManager.Status, b: Withings.WithingsSyncManager.Status) -> Swift.Bool
  }
  public class var status: Withings.WithingsSyncManager.Status {
    get
  }
  @objc override dynamic public init()
  public class func start(with deviceKeys: [Swift.String], allowBackgroundScan: Swift.Bool = true)
  public class func stop()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WithingsPeripheral {
  final public let name: Swift.String?
  final public let deviceKey: Swift.String
  @objc deinit
}
public enum WithingsSyncStatus {
  case started(Withings.WithingsPeripheral)
  case succeeded(Withings.WithingsPeripheral)
  case failed(Withings.WithingsPeripheral)
  public static let notificationName: Foundation.Notification.Name
  public static let notificationStatusKey: Swift.String
}
extension CoreBluetooth.CBPeripheral : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension CoreBluetooth.CBUUID : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension CoreBluetooth.CBCharacteristic : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct WithingsWebViewNotification {
  public var type: Swift.Int {
    get
  }
  public var parameters: [Swift.String : Swift.String] {
    get
  }
}
public enum WithingsInfo {
  public static let version: Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class WebBluetoothWebView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class WithingsWebView : Withings.WebBluetoothWebView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public var isBusy: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration, polyfillJs: Swift.String? = nil, notificationCallback: @escaping ((Withings.WithingsWebViewNotification) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var navigationDelegate: (any WebKit.WKNavigationDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
